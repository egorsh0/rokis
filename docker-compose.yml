services:
  # ───── Vault ────────────────────────────────────────────────────────────────
  vault:
    image: hashicorp/vault:latest
    container_name: vault
    cap_add: [ "IPC_LOCK" ]
    ports:
      - "8200:8200"
    volumes:
      - ./vault/config:/vault/config:ro
      - certbot_conf:/vault/certs:ro
      - /opt/vault_data:/vault/data
    command: vault server -config=/vault/config/vault.hcl
    networks: [ internal ]
  
  vault-agent:
    image: hashicorp/vault:latest
    container_name: vault-agent
    depends_on:
      - vault
    environment:
      VAULT_ADDR: http://vault:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - ./vault/agent:/vault/agent
      - ./vault/agent/secrets:/vault/agent/secrets
    command: vault agent -config=/vault/agent/config.hcl -log-level=debug
    networks: [ internal ]
  
  # ───── Nginx ────────────────────────────────────────────────────────────────
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - rokis
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - certbot_www:/var/www/certbot:ro
      - certbot_conf:/etc/letsencrypt:ro
    networks:
      - internal
      - public
  
  # ───── Certbot ──────────────────────────────────────────────────────────────
  certbot:
    container_name: certbot
    build:
      context: ./config/certbot
      dockerfile: Dockerfile
    depends_on:
      - nginx
    volumes:
      - certbot_www:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    networks: [ internal ]
  
  # ───── PostgreSQL ───────────────────────────────────────────────────────────
  db:
    image: postgres:16-alpine
    container_name: db
    env_file:
      - ./vault/agent/secrets/secrets.env
    ports:
      - "5432:5432"
    depends_on:
      - vault-agent
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - ./vault/agent/secrets:/vault/agent/secrets:ro
      - db_data:/var/lib/postgresql/data
      - ./config/dump/seed.sql:/docker-entrypoint-initdb.d/init.sql
    networks: [ internal ]
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
  
  # ───── Redis ────────────────────────────────────────────────────────────────
  cache:
    image: redis:7.0.4-alpine
    container_name: redis
    restart: always
    ports: []
    networks: [ internal ]
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    volumes:
      - ./vault/agent/secrets:/vault/agent/secrets:ro
  
  # ───── API ──────────────────────────────
  rokis:
    image: rokis
    container_name: rokis_api
    build:
      context: .
      dockerfile: rokis/Dockerfile
    env_file:
      - ./vault/agent/secrets/secrets.env
    depends_on:
      cache:
        condition: service_started
      db:
        condition: service_started
      vault-agent:
        condition: service_started
      loki:
        condition: service_started
    ports: ["5000:5000"]
    networks: [ internal ]
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    entrypoint: >
      sh -c '
        echo "⏳ Waiting for /vault/agent/secrets/secrets.env...";
        while [ ! -f /vault/agent/secrets/secrets.env ]; do
          sleep 1;
        done;
        echo "✅ Secrets ready, starting app...";
        exec dotnet rokis.dll'
    volumes:
      - ./vault/agent/secrets:/vault/agent/secrets:ro
  
  # ───── Monitoring ───────────────────────
  # ───── Prometheus ───────────────────────
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    volumes:
      - ./config/monitoring:/etc/prometheus:ro
    ports:
      - "9090:9090"
    networks: [ internal ]
  
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    env_file:
      - ./vault/agent/secrets/secrets.env
    depends_on:
      - db
      - vault-agent
    entrypoint: >
      sh -c 'echo "⏳ Waiting for secrets.env..."; \
        while [ ! -f /vault/agent/secrets/secrets.env ]; do \
          sleep 1; \
        done; \
        echo "✅ secrets.env found"; \
        export $(cat /vault/agent/secrets/secrets.env | xargs); \
        exec /bin/postgres_exporter'
    ports:
      - "9187:9187"
    volumes:
      - ./vault/agent/secrets:/vault/agent/secrets:ro
    networks: [ internal ]
  
  redis-exporter:
    image: oliver006/redis_exporter
    container_name: redis_exporter
    env_file:
      - ./vault/agent/secrets/secrets.env
    environment:
      REDIS_ADDR: ${REDIS_ADDR}
    depends_on:
      - cache
      - vault-agent
    ports:
      - "9121:9121"
    networks: [ internal ]
    volumes:
      - ./vault/agent/secrets:/vault/agent/secrets:ro
  
  # ───── Promtail ───────────────────────
  promtail:
    image: grafana/promtail:2.9.2
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - /etc/machine-id:/etc/machine-id
      - ./config/promtail:/etc/promtail
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/promtail.yaml
    networks: [ internal ]
  
  loki:
    container_name: loki
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/config.yaml
    volumes:
      - ./config/loki:/etc/loki
      - loki-data:/loki
    networks: [ internal ]
    
  node_exporter:
    container_name: node_exporter
    image: prom/node-exporter
    ports: [ "9100:9100" ]
    networks: [ internal ]
  # ───── Grafana ──────────────────────────
  
  grafana:
    image: grafana/grafana
    container_name: grafana
    env_file:
      - ./vault/agent/secrets/secrets.env
    restart: always
    ports:
      - "3000:3000"
    depends_on:
        - loki
        - rokis
        - vault-agent
        - node_exporter
        - promtail
        - redis-exporter
        - postgres-exporter
        - prometheus
    volumes:
      - ./vault/agent/secrets:/vault/agent/secrets:ro
      - grafana-data:/var/lib/grafana
    networks: [ internal ]

volumes:
  db_data:
  loki-data:
  grafana-data:
  certbot_www:
  certbot_conf:

networks:
  internal:
    driver: bridge
    attachable: true
  public:
    driver: bridge
    attachable: true