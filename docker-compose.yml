services:
  # ───── Vault ────────────────────────────────────────────────────────────────
  vault:
    image: hashicorp/vault:latest
    container_name: vault
    cap_add: [ "IPC_LOCK" ]
    ports:
      - "8200:8200"
    volumes:
      - ./vault/config:/vault/config:ro
      - certbot_conf:/vault/certs:ro
      - /opt/vault_data:/vault/data
    command: vault server -config=/vault/config/vault.hcl
    networks: [ internal ]
  
  vault-agent:
    image: hashicorp/vault:latest
    container_name: vault-agent
    depends_on:
      - vault
    environment:
      VAULT_ADDR: http://vault:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - ./vault/agent:/vault/agent
      - ./vault/agent/secrets:/vault/agent/secrets
    command: vault agent -config=/vault/agent/config.hcl -log-level=debug
    networks: [ internal ]
  
  # ───── Nginx ────────────────────────────────────────────────────────────────
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - rokis
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - certbot_www:/var/www/certbot:ro
      - certbot_conf:/etc/letsencrypt:ro
    networks:
      - internal
      - public
  
  # ───── Certbot ──────────────────────────────────────────────────────────────
  certbot:
    build:
      context: ./config/certbot
      dockerfile: Dockerfile
    depends_on:
      - nginx
    volumes:
      - certbot_www:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    networks: [ internal ]
  
  # ───── PostgreSQL ───────────────────────────────────────────────────────────
  db:
    image: postgres:16-alpine
    env_file:
      - ./vault/agent/secrets/secrets.env
    ports:
      - "5432:5432"
    depends_on:
      - vault-agent
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./config/dump/seed.sql:/docker-entrypoint-initdb.d/init.sql
    networks: [ internal ]
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
  
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    env_file:
      - ./vault/agent/secrets/secrets.env
    environment:
      DATA_SOURCE_NAME: ${POSTGRES_EXPORTER}
    depends_on:
      - db
      - vault-agent
    ports:
      - "9187:9187"
    networks: [ internal ]
    volumes:
      - vault-shared:/vault/agent:ro
  
  # ───── Redis ────────────────────────────────────────────────────────────────
  cache:
    image: redis:7.0.4-alpine
    restart: always
    ports: []
    networks: [ internal ]
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
  
  redis-exporter:
    image: oliver006/redis_exporter
    env_file:
      - ./vault/agent/secrets/secrets.env
    environment:
      REDIS_ADDR: ${REDIS_ADDR}
    depends_on:
      - cache
      - vault-agent
    ports:
      - "9121:9121"
    networks: [ internal ]
    volumes:
      - vault-shared:/vault/agent:ro
  
  # ───── API ──────────────────────────────
  rokis:
    image: rokis
    build:
      context: .
      dockerfile: rokis/Dockerfile
    env_file:
      - ./vault/agent/secrets/secrets.env
    depends_on:
      cache:
        condition: service_started
      db:
        condition: service_started
      vault-agent:
        condition: service_started
      loki:
        condition: service_started
    ports: ["5000:5000"]
    networks: [ internal ]
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    entrypoint: ["sh", "-c", "while [ ! -f /vault/agent/secrets/secrets.env ]; do sleep 1; done; exec dotnet idcc.dll"]
    volumes:
      - ./vault/agent/secrets:/vault/agent/secrets:ro

  # ───── Prometheus ───────────────────────
  prometheus:
    image: prom/prometheus
    restart: always
    volumes:
      - ./config/monitoring:/etc/prometheus:ro
    ports:
      - "9090:9090"
    networks: [ internal ]
  
  loki:
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki:/etc/loki
    
  # ───── Grafana ──────────────────────────
  grafana:
    image: grafana/grafana
    env_file:
      - ./vault/agent/secrets/secrets.env
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_PASS}
    depends_on:
        - loki
        - rokis
        - vault-agent
    volumes:
      - grafana-data:/var/lib/grafana
      - vault-shared:/vault/agent:ro
    networks: [ internal ]

volumes:
  vault-data:
  vault-shared:
  db_data:
  grafana-data:
  certbot_www:
  certbot_conf:

networks:
  internal:
    driver: bridge
    attachable: true
  public:
    driver: bridge
    attachable: true