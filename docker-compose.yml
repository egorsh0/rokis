version: '3.9'

services:
  # ───── PostgreSQL ───────────────────────────────────────────────────────────
  db:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 787898
      POSTGRES_DB: idcc
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./idcc/docker/seed.sql:/docker-entrypoint-initdb.d/init.sql
    networks: [ internal ]
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
  
  # postgres-exporter:
  #   image: prometheuscommunity/postgres-exporter
  #   environment:
  #     DATA_SOURCE_NAME: "postgresql://postgres:787898@db:5432/idcc?sslmode=disable"
  #   depends_on:
  #     - db
  #   ports:
  #     - "9187:9187"
  #   networks: [ internal ]
  
  # ───── Redis ────────────────────────────────────────────────────────────────
  cache:
    image: redis:7.0.4-alpine
    restart: always
    ports: []
    networks: [ internal ]
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
  
  # redis-exporter:
  #   image: oliver006/redis_exporter
  #   environment:
  #     REDIS_ADDR: redis://cache:6379
  #   depends_on:
  #     - cache
  #   ports:
  #     - "9121:9121"
  #   networks: [ internal ]
  
  # ───── API ──────────────────────────────
  idcc:
    image: idcc
    build:
      context: .
      dockerfile: idcc/Dockerfile
    depends_on:
      cache:      { condition: service_started }
    ports: ["5000:5000"]
    networks: [ internal ]
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  # ───── Prometheus ───────────────────────
  # prometheus:
  #   image: prom/prometheus
  #   restart: always
  #   volumes:
  #     - ./idcc/monitoring:/etc/prometheus:ro
  #   ports:
  #     - "9090:9090"
  #   networks: [ internal ]
  #   
  # # ───── Grafana ──────────────────────────
  # grafana:
  #   image: grafana/grafana
  #   restart: always
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #   networks: [ internal ]
volumes:
  db_data:
  grafana-data:

networks:
  internal:
    driver: bridge
    attachable: true
  public:
    driver: bridge
    attachable: true